import { Component, OnInit } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { FormBuilder, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';

import { TimesheetstatusService } from '../timesheetstatus.service';
import { ITimesheetstatus } from '../itimesheetstatus';
import { BaseDetailsComponent, Globals, PickerDialogService, ErrorService } from 'src/app/common/shared';
import { GlobalPermissionService } from 'src/app/core/global-permission.service';

import { StatusService } from 'src/app/entities/status/status.service';
import { TimesheetService } from 'src/app/entities/timesheet/timesheet.service';

@Component({
  selector: 'app-timesheetstatus-details',
  templateUrl: './timesheetstatus-details.component.html',
  styleUrls: ['./timesheetstatus-details.component.scss'],
})
export class TimesheetstatusDetailsComponent extends BaseDetailsComponent<ITimesheetstatus> implements OnInit {
  title = 'Timesheetstatus';
  parentUrl = 'timesheetstatus';
  constructor(
    public formBuilder: FormBuilder,
    public router: Router,
    public route: ActivatedRoute,
    public dialog: MatDialog,
    public global: Globals,
    public timesheetstatusService: TimesheetstatusService,
    public pickerDialogService: PickerDialogService,
    public errorService: ErrorService,
    public statusService: StatusService,
    public timesheetService: TimesheetService,
    public globalPermissionService: GlobalPermissionService
  ) {
    super(formBuilder, router, route, dialog, global, pickerDialogService, timesheetstatusService, errorService);
  }

  ngOnInit() {
    this.entityName = 'Timesheetstatus';
    this.setAssociations();
    super.ngOnInit();
    this.setForm();
    this.getItem();
    this.setPickerSearchListener();
  }

  setForm() {
    this.itemForm = this.formBuilder.group({
      notes: [''],
      statuschangedate: [''],
      statuschangedateTime: [''],
      statusid: ['', Validators.required],
      timesheetid: ['', Validators.required],
      statusDescriptiveField: [''],
      timesheetDescriptiveField: [''],
    });

    this.fields = [
      {
        name: 'notes',
        label: 'notes',
        isRequired: false,
        isAutoGenerated: false,
        type: 'string',
      },
      {
        name: 'statuschangedate',
        label: 'statuschangedate',
        isRequired: false,
        isAutoGenerated: false,
        type: 'date',
      },
      {
        name: 'statuschangedateTime',
        label: 'statuschangedate Time',
        isRequired: false,
        isAutoGenerated: false,
        type: 'time',
      },
      {
        name: 'statusid',
        label: 'statusid',
        isRequired: true,
        isAutoGenerated: false,
        type: 'number',
      },
      {
        name: 'timesheetid',
        label: 'timesheetid',
        isRequired: true,
        isAutoGenerated: false,
        type: 'number',
      },
    ];
  }

  onItemFetched(item: ITimesheetstatus) {
    this.item = item;
    this.itemForm.patchValue(item);
    this.itemForm.get('statuschangedate').setValue(item.statuschangedate ? new Date(item.statuschangedate) : null);
    this.itemForm
      .get('statuschangedateTime')
      .setValue(this.timesheetstatusService.formatDateStringToAMPM(item.statuschangedate));
  }

  setAssociations() {
    this.associations = [
      {
        column: [
          {
            key: 'statusid',
            value: undefined,
            referencedkey: 'id',
          },
        ],
        isParent: false,
        table: 'status',
        type: 'ManyToOne',
        label: 'status',
        service: this.statusService,
        descriptiveField: 'statusDescriptiveField',
        referencedDescriptiveField: 'id',
      },
      {
        column: [
          {
            key: 'timesheetid',
            value: undefined,
            referencedkey: 'id',
          },
        ],
        isParent: false,
        table: 'timesheet',
        type: 'ManyToOne',
        label: 'timesheet',
        service: this.timesheetService,
        descriptiveField: 'timesheetDescriptiveField',
        referencedDescriptiveField: 'id',
      },
    ];

    this.childAssociations = this.associations.filter((association) => {
      return association.isParent;
    });

    this.parentAssociations = this.associations.filter((association) => {
      return !association.isParent;
    });
  }

  onSubmit() {
    let timesheetstatus = this.itemForm.getRawValue();
    timesheetstatus.statuschangedate = this.dataService.combineDateAndTime(
      timesheetstatus.statuschangedate,
      timesheetstatus.statuschangedateTime
    );
    delete timesheetstatus.statuschangedateTime;
    super.onSubmit(timesheetstatus);
  }
}
